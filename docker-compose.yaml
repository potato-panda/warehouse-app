services:
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "4000"
    depends_on:
      - backend
    networks:
      - app_network

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - SPRING_APPLICATION_NAME=server
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=true
      - SPRING_DATA_REST_DEFAULT_PAGE_SIZE=20
      - SPRING_DATA_REST_MAX_PAGE_SIZE=100
      - SECURITY_JWT_EXPIRATION_PERIOD=${SECURITY_JWT_EXPIRATION_PERIOD}
      - SECURITY_JWT_REFRESH_PERIOD=${SECURITY_JWT_REFRESH_PERIOD}
      - SECURITY_JWT_SECRET=${SECURITY_JWT_SECRET}
      - SECURITY_JWT_ISSUER=${SECURITY_JWT_ISSUER}
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=debug
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_REST=debug
      - SERVER_SERVLET_SESSION_TIMEOUT=7d
    expose:
      - "8080"
    depends_on:
      - db
    networks:
      - app_network

  db:
    image: postgres
    container_name: postgres_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432"
    networks:
      - app_network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - lan_network
      - app_network

volumes:
  postgres_data:

networks:
  lan_network:
    driver: bridge
  app_network:
    driver: bridge
    internal: true